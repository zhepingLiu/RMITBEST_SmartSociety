<!--
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  
        ">

	&lt;!&ndash; 基于Druid数据库链接池的数据源配置 &ndash;&gt;
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		&lt;!&ndash; 基本属性driverClassName、 url、user、password &ndash;&gt;
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        &lt;!&ndash; 通常来说，只需要修改initialSize、minIdle、maxActive &ndash;&gt;
        &lt;!&ndash; 初始化时建立物理连接的个数，缺省值为0 &ndash;&gt;
        <property name="initialSize" value="${datasource.initialSize}" />
        &lt;!&ndash; 最小连接池数量 &ndash;&gt;
        <property name="minIdle" value="${datasource.minIdle}" />
        &lt;!&ndash; 最大连接池数量，缺省值为8 &ndash;&gt;
        <property name="maxActive" value="${datasource.maxActive}" />

        &lt;!&ndash; 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 &ndash;&gt;
        <property name="maxWait" value="${datasource.maxWait}" />
		&lt;!&ndash;
		            有些数据库连接的时候有超时限制（MySQL连接在8小时后断开），或者由于网络中断等原因，连接池的连接会出现失效的情况，这时候可以设置一个testWhileIdle参数为true，
		            如果检测到当前连接不活跃的时间超过了timeBetweenEvictionRunsMillis，则去手动检测一下当前连接的有效性，在保证确实有效后才加以使用。
		            在检测活跃性时，如果当前的活跃时间大于minEvictableIdleTimeMillis，则认为需要关闭当前连接。当
		            然，为了保证绝对的可用性，你也可以使用testOnBorrow为true（即在每次获取Connection对象时都检测其可用性），不过这样会影响性能。
        &ndash;&gt;
        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒（3600000:为1小时） &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="${datasource.timeBetweenEvictionRunsMillis}" />
        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒(300000:为5分钟) &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="${datasource.minEvictableIdleTimeMillis}" />
        &lt;!&ndash; 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 &ndash;&gt;
        <property name="validationQuery" value="${datasource.validationQuery}" />
        &lt;!&ndash; 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。建议配置为true，不影响性能，并且保证安全性。&ndash;&gt;
        <property name="testWhileIdle" value="${datasource.testWhileIdle}" />
        &lt;!&ndash; 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。缺省值:true &ndash;&gt;
        <property name="testOnBorrow" value="${datasource.testOnBorrow}" />
        &lt;!&ndash; 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。缺省值:false &ndash;&gt;
        <property name="testOnReturn" value="${datasource.testOnReturn}" />
        
        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        &lt;!&ndash; 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。缺省值:false &ndash;&gt;
        &lt;!&ndash; <property name="poolPreparedStatements" value="true" /> &ndash;&gt;
        &lt;!&ndash; 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100。 &ndash;&gt;
        &lt;!&ndash; <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> &ndash;&gt;
        
        &lt;!&ndash; 解密密码必须要配置的项 &ndash;&gt;
        <property name="filters" value="config" />
        <property name="connectionProperties" value="config.decrypt=false" />
        
	</bean>
	&lt;!&ndash; 将数据源映射到sqlSessionFactory中 &ndash;&gt;
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
	       <array>
	           <value>classpath*:mybatis/mapper/*.xml</value>
	       </array>
	    </property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.joysuch.*.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	&lt;!&ndash; SqlSession模板类实例 &ndash;&gt;
	&lt;!&ndash; <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="close"> <constructor-arg index="0" ref="sqlSessionFactory" 
		/> </bean> &ndash;&gt;

	&lt;!&ndash;======= 事务配置 Begin ================= &ndash;&gt;
	&lt;!&ndash; 事务管理器（由Spring管理MyBatis的事务） &ndash;&gt;
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		&lt;!&ndash; 关联数据源 &ndash;&gt;
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	&lt;!&ndash;======= 事务配置 End =================== &ndash;&gt;

	<tx:annotation-driven transaction-manager="txManager" />
	
</beans> -->
